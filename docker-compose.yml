services:
  postgres:
    image: postgres:14-alpine
    restart: always
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - default-network
  consumer:
    build:
      context: .
      dockerfile: ./apps/consumer/Dockerfile
      target: development
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
    env_file:
      - ./apps/consumer/.env
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      -  .:/usr/src/app
      - node_modules:/app/node_modules
    networks:
      - default-network
    command: sh ./wait-for.sh postgres:${POSTGRES_PORT} -- npm run start:dev:consumer consumer
  producer:
    build:
      context: .
      dockerfile: ./apps/producer/Dockerfile
      target: development
    command: npm run start:dev producer
    env_file:
      - ./apps/producer/.env
    depends_on:
      - postgres
      - consumer
      - mailer
      - rabbitmq
    volumes:
      -  .:/usr/src/app
      - node_modules:/app/node_modules
    ports:
      - '3000:3000'
    networks:
      - default-network
  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'
    networks:
      - default-network
  mailer:
    build:
      context: .
      dockerfile: ./apps/mailer/Dockerfile
      target: development
    command: npm run start:dev mailer
    env_file:
      - ./apps/mailer/.env
    depends_on:
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - node_modules:/app/node/modules
    networks:
      - default-network

volumes:
  db_data:
  node_modules:
networks:
  default-network: